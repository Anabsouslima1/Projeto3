#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_INVESTIDORES 10  // Aumentamos a capacidade para adicionar mais investidores

// Dados 
typedef struct {
    char cpf[12];     // CPF do investidor
    char senha[7];    // Senha do investidor
    char nome[20];    // Nome do investidor
    float reais;      // Saldo em reais
    float bitcoin;    // Saldo em Bitcoin
    float ethereum;   // Saldo em Ethereum
    float ripple;     // Saldo em Ripple
} Investidor;

// Lista de investidores predefinidos, incluindo o gerente
Investidor investidores[MAX_INVESTIDORES] = {
    {"12345678910", "123456", "Analiza Julia", 0.00, 0.00, 0.00, 0.00},
    {"11111111111", "234567", "Ana", 0.00, 0.00, 0.00, 0.00},
    {"22222222222", "345678", "Liza", 0.00, 0.00, 0.00, 0.00},
    {"33333333333", "456789", "Julia", 0.00, 0.00, 0.00, 0.00},
    {"1234567899", "654321", "Gerente", 0.00, 0.00, 0.00, 0.00}  // Gerente
};

int total_investidores = 5;  // Contador de investidores cadastrados

// Função para consultar saldo do investidor
void consultar_saldo(int cliente) {
    char senha_acesso_saldo[7]; // 6 dígitos + 1 para o caractere nulo

    while (1) {
        printf("==----------------------------==\n");
        printf("Digite sua senha: ");
        scanf("%s", senha_acesso_saldo);
        if (strcmp(investidores[cliente].senha, senha_acesso_saldo) == 0) {
            printf("==----------------------------==\n");
            printf("Nome: %s\n", investidores[cliente].nome);
            printf("CPF: %s\n", investidores[cliente].cpf);
            printf("\nReais (R$): %.2f\n", investidores[cliente].reais);
            printf("Bitcoin (BTC): %.6f\n", investidores[cliente].bitcoin);
            printf("Ethereum (ETH): %.6f\n", investidores[cliente].ethereum);
            printf("Ripple (XRP): %.6f\n", investidores[cliente].ripple);
            return;
        } else {
            printf("Senha incorreta. Digite novamente.\n");
        }
    }
}

// Função para o menu do investidor
void menu_investidor(int cliente) {
    int opcao_menu;

    while (1) {
        printf("==----------------------------==\n");
        printf("Menu Investidor: \n");
        printf("1. Consultar saldo\n");
        printf("2. Consultar extrato\n");
        printf("3. Depositar\n");
        printf("4. Sacar\n");
        printf("5. Comprar criptomoedas\n");
        printf("6. Vender criptomoedas\n");
        printf("7. Atualizar cotação\n");
        printf("8. Sair\n");
        printf("==----------------------------==\n");
        printf("Escolha sua opção: ");
        scanf("%d", &opcao_menu);

        switch (opcao_menu) {
            case 1:
                consultar_saldo(cliente); // Função já implementada
                break;
            case 2:
                // A ser implementada
                printf("Opção 2 - Consultar extrato\n");
                break;
            case 3:
                // A ser implementada
                printf("Opção 3 - Depositar\n");
                break;
            case 4:
                // A ser implementada
                printf("Opção 4 - Sacar\n");
                break;
            case 5:
                // A ser implementada
                printf("Opção 5 - Comprar criptomoedas\n");
                break;
            case 6:
                // A ser implementada
                printf("Opção 6 - Vender criptomoedas\n");
                break;
            case 7:
                // A ser implementada
                printf("Opção 7 - Atualizar cotação\n");
                break;
            case 8:
                return; // Sai do menu
            default:
                printf("Opção inválida. Tente novamente.\n");
                break;
        }
    }
}

// Função do menu do gerente
int menu_gerente() {
    int opcao_menu_gerente;

    while (1) {
        printf("==----------------------------==\n");
        printf("Menu ADM: \n");
        printf("1. Cadastrar novo investidor\n");
        printf("2. Excluir investidor\n");
        printf("3. Consultar saldo geral\n");
        printf("4. Sair\n");
        printf("==----------------------------==\n");
        printf("Escolha sua opção: ");
        scanf("%d", &opcao_menu_gerente);

        switch (opcao_menu_gerente) {
            case 1:
                // Função de cadastro do investidor
                if (total_investidores < MAX_INVESTIDORES) {
                    printf("Digite o CPF do novo investidor: ");
                    scanf("%s", investidores[total_investidores].cpf);
                    printf("Digite a senha do novo investidor: ");
                    scanf("%s", investidores[total_investidores].senha);
                    printf("Digite o nome do novo investidor: ");
                    scanf("%s", investidores[total_investidores].nome);
                    investidores[total_investidores].reais = 0.00;
                    investidores[total_investidores].bitcoin = 0.00;
                    investidores[total_investidores].ethereum = 0.00;
                    investidores[total_investidores].ripple = 0.00;
                    total_investidores++;
                    printf("Novo investidor cadastrado com sucesso!\n");
                } else {
                    printf("Limite de investidores atingido.\n");
                }
                break;
            case 2:
                // Função de exclusão de investidor
                printf("Digite o CPF do investidor a ser excluído: ");
                char cpf_excluir[12];
                scanf("%s", cpf_excluir);
                int encontrado = 0;
                for (int i = 0; i < total_investidores; i++) {
                    if (strcmp(investidores[i].cpf, cpf_excluir) == 0) {
                        for (int j = i; j < total_investidores - 1; j++) {
                            investidores[j] = investidores[j + 1];
                        }
                        total_investidores--;
                        printf("Investidor excluído com sucesso.\n");
                        encontrado = 1;
                        break;
                    }
                }
                if (!encontrado) {
                    printf("Investidor não encontrado.\n");
                }
                break;
            case 3:
                // Consultar saldo geral dos investidores
                printf("==----------------------------==\n");
                for (int i = 0; i < total_investidores; i++) {
                    printf("Nome: %s, CPF: %s, Reais: %.2f, Bitcoin: %.6f, Ethereum: %.6f, Ripple: %.6f\n",
                           investidores[i].nome, investidores[i].cpf, investidores[i].reais, 
                           investidores[i].bitcoin, investidores[i].ethereum, investidores[i].ripple);
                }
                printf("==----------------------------==\n");
                break;
            case 4:
                return 0; // Sai do menu e retorna ao menu de login
            default:
                printf("Opção inválida. Tente novamente.\n");
                break;
        }
    }
}

// Função de login
void efetuar_login() {
    char cpf_login[12];  // 11 dígitos + 1 para o caractere nulo
    char senha_login[7]; // 6 dígitos + 1 para o caractere nulo
    int opcao_login;

    while (1) {
        printf("==--------------------------------------==\n");
        printf("Seja bem-vindo à Exchange de Criptomoedas!\n");
        printf("1 - Efetuar Login\n");
        printf("2 - Sair\n");
        printf("==--------------------------------------==\n");
        printf("Por favor, selecione a opção desejada: ");
        scanf("%d", &opcao_login);

        if (opcao_login == 2) {
            printf("Saindo do programa...\n");
            exit(0); // Saída do programa
        } else if (opcao_login != 1) {
            printf("Opção irreconhecível. Tente novamente.\n");
        } else {
            printf("Digite seu CPF (Somente números): ");
            scanf("%s", cpf_login);

            printf("Digite sua senha (Somente números): ");
            scanf("%s", senha_login);

            for (int i = 0; i < total_investidores; i++) {
                if (strcmp(investidores[i].cpf, cpf_login) == 0 && strcmp(investidores[i].senha, senha_login) == 0) {
                    printf("Login bem-sucedido!\n");
                    if (strcmp(investidores[i].nome, "Gerente") == 0) {
                        if (menu_gerente() == 0) // Menu do gerente
                            return;
                    } else {
                        menu_investidor(i); // Menu do investidor
                    }
                    return;
                }
            }
            printf("CPF ou senha incorretos. Tente novamente.\n");
        }
    }
}

int main() {
    efetuar_login();  // Inicia o processo de login
    return 0;
}
